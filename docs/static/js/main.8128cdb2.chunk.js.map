{"version":3,"sources":["forex/CountryGrid.jsx","App.js","serviceWorker.js","index.js"],"names":["FXCountryGrid","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","makeForexData","data","countryList","state","forExData","rates","i","obj","countryCode","j","toFixed","push","setState","getImage","size","src","imgSize","react_default","a","createElement","alt","getGridColumns","columns","Header","width","accessor","Cell","row","style","display","height","value","_loop","direct","inverse","assertThisInitialized","INR","USD","GBP","JPY","CAD","CHF","AUD","NZD","RUB","ZAR","MXN","BRL","_this2","fetch","then","response","json","date","catch","reason","console","log","Fragment","es","defaultPageSize","getTrProps","rowInfo","background","color","className","Component","App","CountryGrid","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8128cdb2.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport ReactTable from 'react-table';\r\nimport 'react-table/react-table.css';\r\n\r\nclass FXCountryGrid extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        var me = this;\r\n        me.state = {\r\n            imgSize: 16,\r\n            forExData: [],\r\n            countryList: {\r\n                INR: \"in\",\r\n                USD: \"us\",\r\n                GBP: \"gb\",\r\n                JPY: \"jp\",\r\n                CAD: \"ca\",\r\n                CHF: \"ch\",\r\n                AUD: \"au\",\r\n                NZD: \"nz\",\r\n                RUB: \"ru\",\r\n                ZAR: \"za\",\r\n                MXN: \"mx\",\r\n                BRL: \"br\"\r\n            }\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        fetch('https://api.exchangeratesapi.io/latest?base=USD')\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            this.setState({date: data.date});\r\n            this.makeForexData(data);\r\n        }).catch(reason => {console.log(reason)});\r\n    }\r\n\r\n    makeForexData = (data) => {\r\n        const {countryList} = this.state;\r\n        let forExData = [];\r\n        let rates = data.rates;\r\n\r\n        if (!rates) {\r\n            return;\r\n        }\r\n        for (let i in countryList) {\r\n            let obj = {\r\n                countryCode: i\r\n            }\r\n            for (let j in countryList) {\r\n                obj[j] = {};\r\n                obj[j][\"direct\"] = (rates[j]/rates[i]).toFixed(4);\r\n                obj[j][\"inverse\"] = (rates[i]/rates[j]).toFixed(4);\r\n            }\r\n            forExData.push(obj);\r\n        }\r\n\r\n        this.setState({ forExData });\r\n\r\n    }\r\n\r\n    getImage = (countryCode, size) => {\r\n        size = size || this.state.imgSize;\r\n        let src = \"https://www.countryflags.io/\" + countryCode + \"/flat/\" + size+ \".png\"\r\n        return <img src={src} alt={countryCode}/>;\r\n    }\r\n\r\n    getGridColumns = () => {\r\n        let columns = [];\r\n        const { countryList } = this.state;\r\n        columns.push({\r\n            Header: '',\r\n            width: 150,\r\n            accessor: 'countryCode',\r\n            Cell: row => (\r\n                <div\r\n                    style={{\r\n                        display: \"flex\",\r\n                        width: \"100%\",\r\n                        height: \"100%\"\r\n                    }}\r\n                >\r\n                {this.getImage(countryList[row.value], 32)}\r\n                &nbsp;&nbsp;<div>1 {row.value} =<br/>\r\n                Inverse:</div>\r\n                </div>\r\n            )\r\n        });\r\n        for (let i in countryList) {\r\n            let obj = {\r\n                accessor: i\r\n            };\r\n            obj.Header = () => (<span>{i} &nbsp;&nbsp;{this.getImage(countryList[i])}</span>);\r\n            obj.Cell = row => (\r\n                <div\r\n                    style={{\r\n                        display: \"flex\",\r\n                        width: \"100%\",\r\n                        height: \"100%\"\r\n                    }}\r\n                >\r\n                {row.value.direct}<br/>\r\n                {row.value.inverse}\r\n                </div>\r\n            )\r\n            columns.push(obj);\r\n        }\r\n        return columns;\r\n    }\r\n\r\n    render() { \r\n        const columns = this.getGridColumns();\r\n        return <React.Fragment>\r\n        <b>ForEx Date:</b> {this.state.date}\r\n        <ReactTable\r\n            data={this.state.forExData}\r\n            columns={columns}\r\n            defaultPageSize={10}\r\n            getTrProps={(state, rowInfo) => {\r\n                if (rowInfo && rowInfo.row) {\r\n                    return {\r\n                        style: {\r\n                            background: 'black',\r\n                            color: 'white'\r\n\r\n                        }\r\n                    }\r\n                } else {\r\n                    return {}\r\n                }\r\n            }}\r\n            className=\"stripped highlight\"\r\n        />\r\n        </React.Fragment>\r\n    }\r\n}\r\n \r\nexport default FXCountryGrid;","import React, { Component } from 'react';\nimport FXCountryGrid from './forex/CountryGrid';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <FXCountryGrid />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}